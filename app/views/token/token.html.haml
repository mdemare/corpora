%h2== Word: #{@token.word}
- fq_total = @twograms.flatten(1).inject(@token.frequency) {|sum,g2| sum+g2.second}
- fqq = -> kind,position { @token.class.adjacent_words(@token, kind, position) }

- title_ratio = @token.title_expected_ratio
- upper_ratio = @token.upper_expected_ratio
%p== `#{@token.word}` occurs #{fq_total} times in #{100 * @token.sequence_class.count} sentences. It is spelled like `#{UnicodeUtils.titlecase(@token.word)}` #{(100*title_ratio).to_i}% of the time (not counting when it's at the first position of a sentence.) #{likelihood(title_ratio, 0.40, "a (proper) noun")}
%p== It is spelled like `#{UnicodeUtils.upcase(@token.word)}` #{(100*upper_ratio).to_i}% of the time. #{likelihood(upper_ratio, 0.20, "an abbreviation or acronym")}
%table
  %tr
    %td Preceded by definite article
    - fq = fqq[:definite_articles, :preceding]
    %td== #{fq} (#{(100*fq)/fq_total}%)
  %tr
    %td Followed by definite article
    - fq = fqq[:definite_articles, :following]
    %td== #{fq} (#{(100*fq)/fq_total}%)
  %tr
    %td Preceded by indefinite article
    - fq = fqq[:indefinite_articles, :preceding]
    %td== #{fq} (#{(100*fq)/fq_total}%)
  %tr
    %td Followed by indefinite article
    - fq = fqq[:indefinite_articles, :following]
    %td== #{fq} (#{(100*fq)/fq_total}%)
  %tr
    %td Preceded by nominative pronoun
    - fq = fqq[:nominative_pronouns, :preceding]
    %td== #{fq} (#{(100*fq)/fq_total}%)
  %tr
    %td Followed by nominative pronoun
    - fq = fqq[:nominative_pronouns, :following]
    %td== #{fq} (#{(100*fq)/fq_total}%)
  %tr
    %td Preceded by preposition
    - fq = fqq[:prepositions, :preceding]
    %td== #{fq} (#{(100*fq)/fq_total}%)
  %tr
    %td Followed by preposition
    - fq = fqq[:prepositions, :following]
    %td== #{fq} (#{(100*fq)/fq_total}%)

- if @twograms.inject(0) {|sum,x|sum+x.size} == 0
  %h3 No 2-grams found
- else
  .jump
    %a(href="#2pos")== Jump to 2-grams with #{@token.word} in second position
  .jump
    %a(href="#3gram") Jump to 3-grams
  %h3 2-grams
  %table
    %tr
      %th 2-gram
      %th frequency
    - @twograms[0].sort_by(&:second).reverse.each do |g2|
      %tr
        - wt = g2.first
        - if wt.nil?
          - w = "#"
        - else
          - w = wt
          - w = link_to(w,token_url(id: w, source: params[:source])).html_safe
        %td
          = @token.word
          = w
        %td= g2.second

    %tr
      %td
        %a(name="2pos")

    - @twograms[1].sort_by(&:second).reverse.each do |g2|
      %tr
        - wt = g2.first
        - if wt.nil?
          - w = "#"
        - else
          - w = wt
          - w = link_to(w,token_url(id: w, source: params[:source])).html_safe
        %td
          = w
          = @token.word
        %td= g2.second

%a(name="3gram")
%h3 3-grams
- @g3ss_reduced.each do |g3s|
  - g3s.sort_by(&:frequency).reverse.each do |g3|
    %h4
      = link_to "3-gram(#{g3.frequency})", g3_url(id: g3.id, source: params[:source])
      = g3.words(@token_map).map {|w| link_to(w,token_url(id: w, source: params[:source])) }.join(" ").html_safe
